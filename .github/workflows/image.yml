---

name: application-build

on:
  push:
    branches:
    - main
    paths:
    - "compute/**"
    - ".github/workflows/image.yml"
  pull_request:
    branches:
      - main
    paths:
    - "compute/**"
    - ".github/workflows/image.yml"


jobs:
  lint:
    defaults:
      run:
        working-directory: ./compute/app
    runs-on: ubuntu-latest
    steps:
    - name: Install Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.15.x
        stable: false
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Run linters
      uses: golangci/golangci-lint-action@v2
      with:
        version: v1.29

  test:
    defaults:
      run:
        working-directory: ./compute/app
    strategy:
      matrix:
        go-version: [1.15.x]
        platform: [ubuntu-latest]
    runs-on: ${{ matrix.platform }}
    steps:
    - name: Install Go
      if: success()
      uses: actions/setup-go@v2
      with:
        stable: 'false'
        go-version: ${{ matrix.go-version }}
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Run tests
      run: go test -v -covermode=count

  coverage:
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: ./compute/app
    steps:
    - name: Install Go
      if: success()
      uses: actions/setup-go@v2
      with:
        stable: 'false'
        go-version: 1.15.x
    - name: Checkout code
      uses: actions/checkout@v2
    - name: Calc coverage
      run: |
        go test -v -covermode=count -coverprofile=coverage.out
    - name: Convert coverage.out to coverage.lcov
      uses: jandelgado/gcov2lcov-action@v1.0.6
      with:
        working-directory: ./compute/app
    - name: Coveralls
      uses: coverallsapp/github-action@v1.1.2
      with:
          github-token: ${{ secrets.github_token }}
          path-to-lcov: ./compute/app/coverage.lcov
  build:
    runs-on: ubuntu-latest
    needs: [coverage, test, lint]
    name: Build App
    defaults:
      run:
        working-directory: ./compute
    steps:
    - uses: actions/checkout@v2
    - uses: actions/setup-go@v2
      with:
        stable: 'false'
        go-version: 1.15.x
    - run: make build
    - name: Archive production artifacts
      uses: actions/upload-artifact@v2
      with:
        name: arm-build
        path: |
          ./compute/bin/
  ami:
    runs-on: ubuntu-latest
    needs: build
    name: Build Image
    defaults:
      run:
        working-directory: compute/image
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: arm-build
        path: compute/image/tmp
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME }}
        role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
        role-duration-seconds: 1200
        role-session-name: MySessionName
    - name: Use latest Packer
      uses: hashicorp-contrib/setup-packer@v1
    - name: Build AMI
      run: packer build ami.json
  release:
    runs-on: ubuntu-latest
    env:
      PKR_VAR_vpc_id: ${{ secrets.PROD_VPC }}
      PKR_VAR_hash: ${{ github.sha }}
    needs: ami
    name: Release Image
    defaults:
      run:
        working-directory: compute/infra
    steps:
    - uses: actions/checkout@v2
    - uses: actions/download-artifact@v2
      with:
        name: arm-build
        path: compute/image/tmp
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-southeast-2
        role-to-assume: ${{ secrets.AWS_ROLE_TO_ASSUME_DEPLOY }}
        role-external-id: ${{ secrets.AWS_ROLE_EXTERNAL_ID }}
        role-duration-seconds: 1200
        role-session-name: deployer
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 0.14.6
    - name: Terraform fmt
      id: fmt
      run: terraform fmt -check
      continue-on-error: false

    - run: terraform init -backend-config="bucket=${{secrets.BUCKET_NAME}}"
      id: init
      name: Terraform Init
    - name: Terraform Validate
      id: validate
      run: terraform validate 
    - id: plan
      run: terraform plan -no-color
    - name: Update Pull Request
      uses: actions/github-script@0.9.0
      if: github.event_name == 'pull_request'
      env:
        PLAN: "terraform\n${{ steps.plan.outputs.stdout }}"
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const output = `#### Terraform Format and Style üñå\`${{ steps.fmt.outcome }}\`
          #### Terraform Initialization ‚öôÔ∏è\`${{ steps.init.outcome }}\`
          #### Terraform Plan üìñ\`${{ steps.plan.outcome }}\`
          <details><summary>Show Plan</summary>
          \`\`\`${process.env.PLAN}\`\`\`
          </details>
          *Pusher: @${{ github.actor }}, Action: \`${{ github.event_name }}\`*`;

          github.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: output
          })
    - name: Terraform Plan Status
      if: steps.plan.outcome == 'failure'
      run: exit 1
    - name: Terraform Apply
      if: github.ref == 'refs/heads/main' && github.event_name == 'push'
      run: terraform apply -auto-approve -no-color
